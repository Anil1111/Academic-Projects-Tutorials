###################
## VSCode Shortcuts
###################

1. Alt+Shift+F = Format CSS/SCSS code in VSCode
2. Ctrl+F2 / Press Alt + Select lines Randomly = Select Multilines in VSCode
3. Alt + Q = Manual keybinding to the command pallet - Emmet: Wrap individual lines with abbreviation
4. Ctrl + Shift + P = Open up the command pallet in VSCode
5. Alt + Shift + F = Use formatter to format the page (User settings can be found in settings.JSON)
6. Alt + Click on HTML tag to collapse all content in Chrome Developer tools                            **Chrome Dev Tools
7. Ctrl +Alt + N = To run the JS code using inbuilt node and output in console; using the Code runner extension
---------------------------------------------------------------------------------------

###################
## VSCode Extensions
###################

1. GIT History - Don Jayamanne - Useful for working with GIT source control
2. Beautify css/sass/scss/less - michelemelluso - Code beautifier and syntax recommendation (OPTIONAL)
3. Beautify - HookyQR - Code formatter
3. Bootstrap 4, Font awesome 4, Font Awesome 5 Free & Pro snippets - Ashok Koyi - Bootstrap 4 & Font Awesome code recommendation
4. Open in browser - TechER - Opening default browser from VSCode
5. Live Sass Compiler - Ritwick Dey - Watching Sass files and automatic transpiling of SCSS to CSS
6. Live Server - Ritwick Dey - Starting up web pages in browser 
7. Code Runner - Jun Han - Running JS code live
8. Node.js Extension Pack - Wade Anderson - Node JS support
9. ESLint - Dirk baeumer
10. Visual Studio IntelliCode - Microsoft
11. Prettier - Code formatter - Esben Peterson
12. Debugger for Chrome - Debugging



---------------------------------------------------------------------------------------

###################
## NPM Libraries Used 
###################
** Use --save-dev to download and install into local repository
1. Bootstrap: npm install -g bootstrap
2. SASS: npm install -g sass
3. holderjs: npm install -g holderjs #Used for providing UI support for blank sized images
4. jquery 
---------------------------------------------------------------------------------------

###################
## Bootstrap requirements
###################
CSS (CDN): <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
SASS (import to scss file) : @import "../node_modules/bootstrap/scss/bootstrap.scss"; 
JS (CDN):
  <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
JS (add to script tag in html): 
  <script src="../node_modules/jquery/dist/jquery.min.js"></script>
  <script src="../node_modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script> <!-- #the bundle contains popperJS+JS -->
---------------------------------------------------------------------------------------
###################
## Softwares Used
###################
1. VSCode - Text Editor
2. GIT - Version control
3. NodeJS
4. Inkspace - SVG Creator
---------------------------------------------------------------------------------------

###################
## VSCode settings
###################

1. Set git-bash as default terminal: Press Ctrl+Shift+P and enter terminal.integrated.shell.windows in search bar, there add the path to the git-bash: C:\Program Files\Git\bin\bashe.exe
2. File --> AutoSave
---------------------------------------------------------------------------------------

###################
## Browser Extensions - Chrome
###################

1. JSON View #to view json files in browser with syntax highlighting
  Ctrl + Alt + Mouse Click to collapse all options in dev tools

---------------------------------------------------------------------------------------
###################
## Template Engines
###################
1. Safari - Webkit
2. Edge - Trident
3. Chrome and Opera - Blink
4. Firefox - Gecko
---------------------------------------------------------------------------------------

###################
## GIT Commands Used
###################
git init #To initialize a GIT repo
git config --global user.name = "<name>"
git config --global user.email = "<email>"
git clone remote_location clone_name #cloning a git repository from a remote location
git status #To check the status of the working tree
git add . #To stage the files; ready for commit
git commit -m "message" #To commit
git remote -v #to view the URL of remote file
git remote add origin <<url>> #UsedTogether
git push -u origin master     #UsedTogether and enter username and password
git rm <filename> #removing filename
touch <filename> #creates new file
.gitignore #create this file to add the exception list of all the files you do not wish to commit
git push origin <<master>> #To push changes tfrom master / branchName to remote repo
git pull <<origin>>
git checkout <branchName> #Checking out the current branch; default: master
git branch <branchname> #creating a new branch 
git branch / git show-branch #to view the existing branch
git branch -d <<brnachName>> #to delete the branchName
git merge <<branchName>> #to merge the branch to master
git diff <<filename>> #to view changes made to a file #use q to exit the less file or set   git config --global core.pager ca
                      #would appear blank if no differnce found
git log #to view log files
git checkout head <<filename>> #to retrieve the last commited version of the filename; HEAD refers to the last commit
git checkout -- <<filename>> #to retrieve the last commited version of the filename -SAME as above
git reset <<last6charsOfLastCommit>> #to retrieve all the last commit files
git reset head <<filename>> #to remove the file from staging
git fetch & git merge origin/master #to fetch and later merge the latest updates into the master branch

The workflow for Git collaborations typically follows this order:
  Fetch and merge changes from the remote
  Create a branch to work on a new project feature
  Develop the feature on your branch and commit your work
  Fetch and merge from the remote again (in case new commits were made while you were working)
  Push your branch up to the remote for review and Merge the accepted branh chages into master
---------------------------------------------------------------------------------------

###################
## Terminal Commands
###################
ls / ls -alt #to list all subdirectories
-a - lists all contents, including hidden files and directories
-l - lists all contents of a directory in long format #Columns: access noOfChildLinks ownerName groupName size timestamp
-t - order files and directories by the time they were last modified.
pwd #present working directory
mkdir, touch, cd 
cat <<filename>> #to view the contents of the file in BASH - Bourne Again shell
cp sourceFile destFile #copy contents of sourceFile to destFile
cp sourceFile1 sourceFile2 destDir/ #copy multiple files into the destDir/ #cp -r ../HTTP1/GET ./
cp * destDir/    
cp *name.txt destDir/ #* wildcard to select all files in the working directory to be copied & copy *name.txt
mv sourceFile1 destDir/  #copy sourceFile into destDir/
mv fileName1 fileName2 #renames fileName1 to fileName2
rm filename / rm -r dirName #to remove files or list of files recursively
date #print the timestamp
history #prints the history of the commands executed
head <<filename>> #command to print the first ten lines of filename
env  #prints the environmental settings
clear #clears the terminal

> Standard output
< Standard Input
echo "hello" > fileName #copy the "hello" into fileName; > takes the standard output of the command on the left, redirects it to right file; > overwrites all the contents of fileName
echo "hello" >> fileName / cat fileName1 >> fileName2 #appends "hello" into the exisiting content of fileName; contents of fileName1 are added
cat < fileName #< takes the standard input from the file on the right and inputs it into the program on the left
sort fileName | uniq > fileName2 #sorts the contents of fileName alphabetically and then pipes it as argument to uniq function that eliminates     adjacent dupplicates amd whose value is used as content in fileName2; | is the pipe operater that pipes the result of the first command into next
grep <<searchText>> fileName #grep(global regular expression) is used to search for lines that match a pattern;
grep -i <<searchText>> fileName #case insensitive search
grep -r <<searchText>> dirName #check recursively in all the files within the directory and outputs filenames and lines
grep -r <<searchText>> . #search in present directory as . represents it
grep -l <<searchText>> dirName #check recursively in all the files within the directory and outputs filenames only
wc <<fileName>> #command outputs the number of lines, words, and characters in a file
sed 's/<<searchText>>/<<replaceText>>/g' <<fileName>> #sed(stream editor) which is used for search and replace in fileName; s stands for substitution, whereas g stands for global
---------------------------------------------------------------------------------------
###################
## Bash Commands 
###################

1. NANO:
nano <<filename>> #opens the file in nano text editor
nano ~/.bash_profile #opens the bash profile where you can set the environmental settings and gets saved as a hidden file in user directory
  Ctrl + O #for saving the file in nano
  Ctrl + X #to exit
source ~/.bash_profile #to implement the settings in bash profile in current terminal session or else restart a fresh terminal session
To remove nano error: dos2unix /usr/share/nano/git.nanorc  #execute the command in git-bash by running as admin
#comments 


2. BASH SCRIPTS: (use the ./bashScript.sh to view)
~ #represents the home directory
chmod +x <<script>>.sh #provide execute privilege to script
./<<scriptname.sh>> #running a bash script

---------------------------------------------------------------------------------------
###################
## SQLite
###################

Database is stored in a single file.
Different users cant update the same table at the same time.
Does not validate data types.

---------------------------------------------------------------------------------------
###################
## Node.JS
###################

1. Issue for running ES6 commands in Node.js
- use .mjs file extension
- add   "type": "module" in package.JSON
- run node in terminal with --input-type=module
---------------------------------------------------------------------------------------